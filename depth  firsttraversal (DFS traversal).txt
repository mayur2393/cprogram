#include <stdio.h>
#include <stdlib.h>

#define MAX 100  // Maximum number of vertices

int adjMatrix[MAX][MAX]; // Adjacency matrix to store the graph
int visited[MAX];        // Array to keep track of visited nodes

// Function to add an edge in the graph
void addEdge(int u, int v) {
    adjMatrix[u][v] = 1;
    adjMatrix[v][u] = 1; // For an undirected graph
}

// Function to perform DFS traversal
void DFS(int vertex, int n) {
    visited[vertex] = 1;
    printf("%d ", vertex);

    // Visit all adjacent vertices of the current vertex
    for (int i = 0; i < n; i++) {
        if (adjMatrix[vertex][i] == 1 && !visited[i]) {
            DFS(i, n);  // Recursive DFS call
        }
    }
}

int main() {
    int n, edges, u, v, startVertex;

    // Initialize adjacency matrix and visited array
    for (int i = 0; i < MAX; i++) {
        visited[i] = 0;
        for (int j = 0; j < MAX; j++) {
            adjMatrix[i][j] = 0;
        }
    }

    // Input number of vertices and edges
    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the number of edges: ");
    scanf("%d", &edges);

    // Input all edges
    for (int i = 0; i < edges; i++) {
        printf("Enter the edge (u v): ");
        scanf("%d %d", &u, &v);
        addEdge(u, v);
    }

    // Input starting vertex for DFS
    printf("Enter the starting vertex for DFS: ");
    scanf("%d", &startVertex);

    // Perform DFS traversal
    printf("DFS Traversal: ");
    DFS(startVertex, n);

    return 0;
}
