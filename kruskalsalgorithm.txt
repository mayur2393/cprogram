***********KRUSKAL'S ALGORITHEM******

#include <stdio.h>
#include <stdlib.h>

typedef struct
{
    int src, dest, weight;
} edge;

edge *graph;
int *MSTvertices;

void sort(edge graph[], int nE)
{
    int i, pass;
    edge temp;
    for (pass = 1; pass <= nE - 1; pass++)
        for (i = 0; i < nE - pass; i++)
            if (graph[i].weight > graph[i + 1].weight)
            {
                temp = graph[i];
                graph[i] = graph[i + 1];
                graph[i + 1] = temp;
            }
}

int find(int V, int nV)
{
    // return 1 if vertex v is in the selected vertices list
    int k,nv;
    for( k = 0; k < nV; k++)
        if (MSTvertices[k] == V)
            return 1;
    return 0;
}

void kruskalMST(int nV, int nE)
{
    edge mst[nV - 1];
    int i = 0, j = 0, k = 0, count = 0, mincost = 0, first = 0, second = 0,v;

    MSTvertices = (int *)malloc(nV * sizeof(int));
    for ( v = 0; v < nV; v++)
        MSTvertices[v] = -1;

    sort(graph, nE);

    while (count < nV - 1)
    {
        first = find(graph[i].src, nV);
        second = find(graph[i].dest, nV);

        if (!(first && second))
        {
            mst[k++] = graph[i];
            count++;
            mincost += graph[i].weight;

            if (first == 0)
                MSTvertices[j++] = graph[i].src;
            if (second == 0)
                MSTvertices[j++] = graph[i].dest;
        }
        i++;
    }

    printf("The edges in the Minimum Spanning Tree are: \n");
    for (i = 0; i < nV - 1; i++)
        printf("%d -- %d == %d\n", mst[i].src, mst[i].dest, mst[i].weight);

    printf("Minimum Cost of Spanning Tree: %d\n", mincost);
}

int main()
{
    int nV, nE,i;

    printf("Enter the number of vertices: ");
    scanf("%d", &nV);

    printf("Enter the number of edges: ");
    scanf("%d", &nE);

    graph = (edge *)malloc(nE * sizeof(edge));

    printf("Enter the details of each edge (source destination weight):\n");
    for ( i = 0; i < nE; i++)
    {
        printf("Edge %d: ", i + 1);
        scanf("%d %d %d", &graph[i].src, &graph[i].dest, &graph[i].weight);
    }

    kruskalMST(nV, nE);

    free(graph);
    free(MSTvertices);

    return 0;
}

*********OUTPUT*******

/tmp/LThvTQkFrg.o
Enter the number of vertices: 4
Enter the number of edges: 5
Enter the details of each edge (source destination weight):
Edge 1: 1
2
5
Edge 2: 2
3
3
Edge 3: 2
4
2
Edge 4: 3
4
6
Edge 5: 1
4
4
The edges in the Minimum Spanning Tree are: 
2 -- 4 == 2
2 -- 3 == 3
1 -- 4 == 4
Minimum Cost of Spanning Tree: 9
